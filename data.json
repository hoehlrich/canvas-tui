{"assignments":[{"name":"LGA 26 - Graphs and Breadth-First Search","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p>See the PDF below for instructions for this LGA.</p>\n<p><a class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"lga-26-graph-bfs.pdf\" href=\"https://elearning.mines.edu/courses/72567/files/7774357?verifier=XN8mIFj9XBGgnIeLOaZneBmQd4wykAeWsxstg8vv&amp;wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/files/7774357\" data-api-returntype=\"File\">lga-26-graph-bfs.pdf</a></p>\n<p><strong>Answer key</strong>: coming soon!</p>\n<p><strong>Readings (<a class=\"inline_disabled external\" href=\"https://ebookcentral.proquest.com/lib/mines/detail.action?docID=3339142\" target=\"_blank\"><span>CLRS</span><span class=\"external_link_icon\" role=\"presentation\"><span class=\"screenreader-only\">Links to an external site.</span></span></a>):</strong></p>\n<ul>\n<li>Appendix B.4</li>\n<li>Chapter 22, Introduction through 22.2</li>\n</ul>\n<p><strong>Lecture videos</strong>:</p>\n<p><a class=\"inline_disabled external\" href=\"https://youtu.be/tooZ0YfuOao\" target=\"_blank\"><span class=\"external_link_icon\" role=\"presentation\"><span class=\"screenreader-only\">inks to an external site.</span></span></a></p>\n<table border=\"1\">\n<tbody>\n<tr>\n<td><strong>Video link</strong></td>\n<td><strong>Slides</strong></td>\n<td><strong>Description</strong></td>\n</tr>\n<tr>\n<td><a class=\"inline_disabled\" href=\"https://mediaspace.mines.edu/media/CSCI220+%7C+Graphs/1_854934sq/363705742\" target=\"_blank\">Graphs (introduction)</a></td>\n<td><a class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"graphs.pptx\" href=\"https://elearning.mines.edu/courses/72567/files/7404035?verifier=QvjAEtUdmsaY84DwwdGnZSLFZlXbb49UaNksKsZG&amp;wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/files/7404035\" data-api-returntype=\"File\">graphs.pptx</a></td>\n<td>Graph basics, definitions, implementation</td>\n</tr>\n<tr>\n<td><a class=\"inline_disabled\" href=\"https://mediaspace.mines.edu/media/CSCI220+%7C+Breadth+First+Search/1_3jsw5mqq/363705742\" target=\"_blank\">Breadth-first Search (BFS)</a></td>\n<td><a class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"BFS.pptx\" href=\"https://elearning.mines.edu/courses/72567/files/7403961?verifier=WhmgESMPpSJmQLsW6N7l3AeDtIl0FX4V5bohOTNL&amp;wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/files/7403961\" data-api-returntype=\"File\">BFS.pptx</a></td>\n<td>Graph search (or traversal) and breadth-first search</td>\n</tr>\n</tbody>\n</table><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72567/assignments/469690","date":"2025-04-09T11:00:00-06:00","course":"CSCI 220"},{"name":"Topic 4C Studio Points","description":null,"html_url":"https://elearning.mines.edu/courses/72767/assignments/454223","date":"2025-04-09T19:00:00-06:00","course":"PHGN 200"},{"name":"Worksheet 11","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p>Please submit Worksheet 11 (below) by the due date given by your instructor.</p>\n<p>&nbsp;</p>\n<p style=\"padding-left: 40px;\"><a id=\"7358061\" class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"Link\" href=\"https://elearning.mines.edu/courses/72125/files/7358076?verifier=nLFEOK3w7V506VujcuqvDfahYoxxsX4sQyxFwl7y&amp;wrap=1\" target=\"_blank\" data-canvas-previewable=\"true\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72125/files/7358076\" data-api-returntype=\"File\">MATH213-Worksheet11.pdf</a></p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72125/assignments/453564","date":"2025-04-09T23:59:59-06:00","course":"MATH 213"},{"name":"Quiz 5","description":null,"html_url":"https://elearning.mines.edu/courses/72767/assignments/454129","date":"2025-04-10T08:00:00-06:00","course":"PHGN 200"},{"name":"Participation Quiz 16","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p><span>Answer the following questions about 17.2 Line Integrals of Scalar Functions and Vector Fields:</span></p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72125/assignments/482221","date":"2025-04-11T23:59:00-06:00","course":"MATH 213"},{"name":"HW11","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p>This is an individual assignment - do not show your work or any solutions to your peers in any section of CSCI 341, only discuss concepts and ideas, per the<span>&nbsp;</span><span class=\"instructure_file_holder link_holder instructure_file_link_holder\"><a class=\"inline_disabled preview_in_overlay\" title=\"CS@MinesCollaborationPolicy.pdf\" href=\"https://elearning.mines.edu/courses/71983/files/7379623?verifier=xqahxTu8ElKNMcxr7qNJXODmLTd3S3ULadsKnxz0&amp;wrap=1\" target=\"_blank\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71983/files/7379623\" data-api-returntype=\"File\">CS@Mines Collaboration Policy</a><a class=\"file_download_btn\" role=\"button\" href=\"https://elearning.mines.edu/courses/71983/files/7379623/download?verifier=xqahxTu8ElKNMcxr7qNJXODmLTd3S3ULadsKnxz0\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71983/files/7379623\" data-api-returntype=\"File\"><span role=\"presentation\"><span>&nbsp;</span></span><span class=\"screenreader-only\">Download CS@Mines Collaboration Policy</span></a><span class=\"screenreader-only\">Download CS@Mines Collaboration Policy</span><a class=\"file_download_btn\" role=\"button\" href=\"https://elearning.mines.edu/courses/36681/files/3839204/download?download_frd=1\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/36681/files/3839204\" data-api-returntype=\"File\"><span class=\"screenreader-only\">Download CS@Mines Collaboration Policy</span></a></span>. Please visit<span>&nbsp;</span>office hours<span>&nbsp;</span>for assistance or arrange a time to meet an instructor or TA.</p>\n<p>Download homework problems in<span>&nbsp;</span><span class=\"instructure_file_holder link_holder instructure_file_link_holder\"><a class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"HW11.pdf\" href=\"https://elearning.mines.edu/courses/71983/files/7785908?verifier=ZvV9aM2VEmfDqOpr94nFKwxDPwLpT5gmMBT62rHz&amp;wrap=1\" target=\"_blank\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71983/files/7785908\" data-api-returntype=\"File\">PDF</a><a class=\"file_download_btn\" role=\"button\" href=\"https://elearning.mines.edu/courses/71983/files/7393196/download?verifier=q4OChjqX4UNcj0fm4agDT8rRW6kwLziLO2wyF1XB\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71983/files/7393196\" data-api-returntype=\"File\"><span role=\"presentation\"><span>&nbsp;</span></span><span class=\"screenreader-only\">Download PDF</span></a></span>or<span>&nbsp;</span><span class=\"instructure_file_holder link_holder instructure_file_link_holder\"><a class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"HW11.docx\" href=\"https://elearning.mines.edu/courses/71983/files/7785909?verifier=N8m3Fr0lWqjwId1vbdeNGtso4Ko9Q9MDOqoGbEuj&amp;wrap=1\" target=\"_blank\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71983/files/7785909\" data-api-returntype=\"File\">WORD</a><a class=\"file_download_btn\" role=\"button\" href=\"https://elearning.mines.edu/courses/71983/files/7393195/download?verifier=ODCS81TBcoeQPKcxYFLXGBeQbUtVn8yAwfhIQKpx\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71983/files/7393195\" data-api-returntype=\"File\"><span role=\"presentation\"><span>&nbsp;</span></span><span class=\"screenreader-only\">Download WORD</span></a></span>format and follow the instructions within it.</p>\n<p>It's fine to handwrite &amp; scan your work, just keep it legible. Make sure your name is on the pages submitted.&nbsp; Please use the same number of pages as the PDF file and each page should have the same problems as the PDF file.</p>\n<p>Please create a PDF named<span>&nbsp;</span><strong>CSCI341_HW11_<em>YourName</em>.pdf</strong>, replacing \"YourName\" with your name -- i.e., if Susan Jones were submitting work, she would create and submit<span>&nbsp;</span><span>CSCI341_HW11_SusanJones.pdf.</span></p>\n<p>Submit your completed homework using the link below that will take you to Gradescope.</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/71983/assignments/482829","date":"2025-04-11T23:59:59-06:00","course":"CSCI 341"},{"name":"17.2 HW - Line Integrals","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p style=\"display: none;\">[syncid:XL:urn:udson:pearson.com/xl/highered:homeworkhistory/98297-H-568644752-2]</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72125/assignments/453290","date":"2025-04-13T23:59:00-06:00","course":"MATH 213"},{"name":"WebAssign Homework #10 (Appendix B, 8.1, 8.2)","description":null,"html_url":"https://elearning.mines.edu/courses/71447/assignments/483024","date":"2025-04-14T23:59:00-06:00","course":"MATH 225"},{"name":"3P - Trie (Programming)","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><h2>Goals</h2>\n<ul>\n<li>Design and implement a working trie data structure</li>\n<li>Sharpen your skills working with dynamically allocated memory and linked structures</li>\n</ul>\n<h2>Overview</h2>\n<p>In this project, you will build a trie data structure.&nbsp; The trie you build will be suited for use as a spelling dictionary with very fast search.&nbsp; The trie may also be used to efficiently generate auto-completion lists from a string prefix.&nbsp; To keep the project scope reasonable, your trie will permit inserts but not removals of strings; also, you will implement the destructor, but not the copy constructor or assignment operator.</p>\n<h2>Preliminaries</h2>\n<p>Set your repository up by running the following command:</p>\n<ul>\n<li><code>git clone https://github.com/Mines-CSCI220/3P-Trie.git</code></li>\n</ul>\n<ul>\n<li>The grading system allows unlimited submissions, but if you are plagued by all the tests passing on your development box, but some tests failing in gradescope, please see an instructor or take advantage of <a title=\"Help Sessions and Office Hours\" href=\"https://elearning.mines.edu/courses/72567/pages/help-sessions-and-office-hours\" data-course-type=\"wikiPages\" data-published=\"true\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/pages/help-sessions-and-office-hours\" data-api-returntype=\"Page\">Help Session expertise</a>. This predicament is particularly common with Mac dev boxes.</li>\n<li>As usual, this project follows <a title=\"Programming Projects Workflow\" href=\"https://elearning.mines.edu/courses/72567/pages/programming-projects-workflow?wrap=1\" data-course-type=\"wikiPages\" data-published=\"true\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/pages/programming-projects-workflow\" data-api-returntype=\"Page\">Programming Projects Workflow</a></li>\n</ul>\n<h2>Implementation details</h2>\n<h3>Summary</h3>\n<p>You are provided with the files <code>trie.h</code> and <code>trie.cpp</code>.&nbsp; The header file contains the declaration for the <code>trie</code> class.&nbsp; The required methods have already been declared, but not implemented - you will not be able to successfully build the project until you provide implementations of these methods.&nbsp; You might want to start by providing \"stub\" implementations for each method; <code>void</code> methods can do nothing, and <code>bool</code> methods can return some default value.</p>\n<p>Note that <code>trie</code> is a regular class, not a template class, so if you define your methods external to the class body, they must go in <code>trie.cpp</code>.&nbsp; (External definitions are recommended for this project, to keep your class declaration readable, but you may implement however you prefer.)</p>\n<p>Here is a brief description of each public method:</p>\n<table style=\"border-collapse: collapse; width: 97.9304%; height: 188px;\" border=\"1\">\n<tbody>\n<tr style=\"height: 29px;\">\n<td style=\"width: 49.9384%; height: 29px;\"><strong>method</strong></td>\n<td style=\"width: 49.9384%; height: 29px;\"><strong>description</strong></td>\n</tr>\n<tr style=\"height: 101px;\">\n<td style=\"width: 49.9384%; height: 101px;\">void insert(const string&amp; s)</td>\n<td style=\"width: 49.9384%; height: 101px;\">Insert the string <code>s</code> into the trie.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9384%;\">bool contains(const string&amp; s)</td>\n<td style=\"width: 49.9384%;\">Return true if the string <code>s</code> is present as a complete word in the trie, false otherwise.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9384%;\">bool is_prefix(const string&amp; s)</td>\n<td style=\"width: 49.9384%;\">Return true if the string <code>s</code> is present as a complete word or as a prefix to other words in the trie.</td>\n</tr>\n<tr>\n<td style=\"width: 49.9384%;\">void extend<span style=\"background-color: transparent;\">(</span><span style=\"background-color: transparent;\">const</span><span style=\"background-color: transparent;\"> </span><span style=\"background-color: transparent;\">string</span><span style=\"background-color: transparent;\"> </span><span style=\"background-color: transparent;\">&amp;</span><span style=\"background-color: transparent;\">prefix</span><span style=\"background-color: transparent;\">, </span><span style=\"background-color: transparent;\">vector</span><span style=\"background-color: transparent;\">&lt;</span><span style=\"background-color: transparent;\">string</span><span style=\"background-color: transparent;\">&gt; </span><span style=\"background-color: transparent;\">&amp;</span><span style=\"background-color: transparent;\">result</span><span style=\"background-color: transparent;\">)</span></td>\n<td style=\"width: 49.9384%;\">Add to <code>result</code> all complete words for which <code>prefix</code> is a prefix (including <code>prefix</code> itself, if it is a word in the trie).</td>\n</tr>\n</tbody>\n</table>\n<h3>Details</h3>\n<p>The 4 public methods above hide quite a bit of complexity.&nbsp; To make these work, you will need to decide on a design for and implement a class or structure representing a trie node, and you will almost certainly need additional methods.&nbsp; We also want you to implement correct behavior for the destruction of the trie (to deallocate all dynamically allocated trie nodes).&nbsp; See below for some detailed implementation notes.</p>\n<h4>Trie node</h4>\n<p>You will need a class or struct from which to create your trie node objects.&nbsp; Recall from lecture that a node object in a regular trie needs to keep track of two things.&nbsp; First, it must have an indicator of whether the node represents a valid \"stopping point\" in a path down the trie - that is, if a path stopping at the node represents a complete word (and not just a prefix).&nbsp; Second, it needs to contain an array of pointers to its children - one for every letter in our alphabet.&nbsp; For this project, we will be storing words containing only lowercase letters from the English alphabet.&nbsp; You may wish to include a constructor in your node class to initialize these variables (see the section below titled Initialization). You may also wish to include a destructor (see the section below titled Destruction).</p>\n<p>Because node objects should only be used by the <code>trie</code> class itself, there is no reason to make the node class publicly available.&nbsp; While you may declare this class or struct as a separate type outside of <code>trie</code>, consider instead making it a nested class within the private section of your <code>trie</code> class.&nbsp; A nested class structure looks like this:</p>\n<pre>class A {<br>private:<br>    class B {<br>        int x;<br>    };<br>};</pre>\n<p>This declares a class, <code>B</code>, which is only available for use within the <code>A</code> class and its methods.&nbsp; Note that visibility still applies here; the variable <code>x</code> inside objects of type <code>B</code> may not be accessed by methods of class <code>A</code> unless they are declared public within <code>B</code>.</p>\n<h4>Trie class</h4>\n<p>To support the public methods described above, the <code>trie</code> class will need some internal state.&nbsp; However, for our simple implementation we do not need much - a node to represent the root of the trie should be sufficient.&nbsp; The root node may be statically or dynamically allocated depending on your preference.&nbsp; You may optionally include a constructor to set up the root node (see the section below titled Initialization). &nbsp;You may also wish to include a destructor (see the section below titled Destruction).</p>\n<h4>Initialization</h4>\n<p>Each node in your trie must be initialized properly when created.&nbsp; E.g., all of the child pointers should start as <code>nullptr</code>.&nbsp; You may wish to do this initialization as part of a node class constructor, or you can instead set up nodes as they are created by the <code>trie</code> class.&nbsp; You also need to set the node class to indicate whether or not it represents a terminal node.</p>\n<p>Don't forget to initialize the root node when the <code>trie</code> object itself is created!</p>\n<h4>Destruction (optional)</h4>\n<p>To avoid memory leaks, all dynamically allocated node objects should be deallocated when no longer needed (i.e., when the trie is destroyed).&nbsp; Note that we have no way of testing this!&nbsp; Therefore, doing deallocation is optional.&nbsp; We recommend it for the practice, but get the tests running first.</p>\n<p>The easiest way to do this is to include a destructor in your node class; the destructor simply needs to deallocate any children it holds.&nbsp; If your root node is dynamically allocated, then it must be deallocated in a destructor method in the <code>trie</code> class.&nbsp; When the root node is destroyed, its destructor will be invoked; if the destructor deallocates its children (invoking their destructors in turn), then the entire tree of nodes will get recursively deallocated without much effort on your part.</p>\n<p>If you prefer, you may instead deallocate the entire tree of node objects as part of the <code>trie</code> destructor using a post-order traversal of the tree.&nbsp; Why might you prefer to do this?&nbsp; In general, it is good practice to tie object creation and destruction closely together.&nbsp; If the <code>trie</code> class allocates node objects, it might be best for it to have responsibility for destroying them when no longer needed.&nbsp; However, since the trie node class is tightly bound to the <code>trie</code> class anyway, it is not \"wrong\" to do deallocation in the node class destructor if preferred.</p>\n<h4>Insertion</h4>\n<p>The <code>insert()</code> method may be written recursively or iteratively as you prefer.&nbsp; If you do it recursively, you will probably need a helper method.&nbsp; Either way, the process is straightforward; work your way down the tree of nodes, one character of the input string at a time.&nbsp; As long as the character is already stored, you don't need to do anything; however, if you encounter a <code>nullptr</code> on your path, you need to replace the <code>nullptr</code> with a newly allocated node object.&nbsp; Make sure you mark the last node in the path as a terminal value!</p>\n<h4>Containment and prefix testing</h4>\n<p>Containment and prefix testing a very similar, and may closely mirror the form of your <code>insert()</code> method.&nbsp; Work your way down the tree of nodes, one character of the input string at a time; if you cannot make a transition (i.e., you encounter a <code>nullptr</code>), then return <code>false</code>.&nbsp; For containment, return true only if the last node you encounter is a terminal node; for prefix testing, return true if you reach end of the input string, regardless of whether it is terminal or not.</p>\n<h4>Prefix extension</h4>\n<p>The <code>extends()</code> method takes in a prefix string and a reference to a <code>vector&lt;string&gt;</code>.&nbsp; There are (of course) multiple ways to approach writing this method, but there are essentially two phases of work:</p>\n<ol>\n<li>Work your way down the tree one character of the prefix string at a time.&nbsp; (If you encounter a <code>nullptr</code>, then just return without doing anything else - this prefix doesn't exist in the trie.)&nbsp; This will put you at the top of the sub-tree representing all of the words for which the prefix string is a prefix.</li>\n<li>Next, do a pre-order traversal of the sub-tree rooted by the prefix string - you will need a recursive helper method for this.&nbsp; As you traverse the tree, you need to keep track of what string is represented at each node.&nbsp; When you encounter a terminal node, append the string represented by that node to the vector.</li>\n</ol>\n<h2>Running and testing</h2>\n<p>In order to build your solution, you may use the cmake and make commands as usual.</p>\n<p>After you create a build directory with:</p>\n<pre>cmake . -B build</pre>\n<p>or, on a MinGW setup</p>\n<pre>cmake . -B build -G \"MinGW Makefiles\"</pre>\n<p>you may compile and run the test suite:</p>\n<pre>cd build<br>make<br>./run-tests</pre>\n<p>(There is no need to specify a make target - the default target will build everything.)&nbsp; You can also write your own testing code in <code>main.cpp</code>, and then run that code:</p>\n<pre>make<br>./run-main</pre>\n<p>For debugging, use</p>\n<pre>gdb run-main</pre>\n<p><span>For more on GDB, see&nbsp;</span><a title=\"Getting Help and Other Resources\" href=\"https://elearning.mines.edu/courses/72567/pages/getting-help-and-other-resources?wrap=1\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/pages/getting-help-and-other-resources\" data-api-returntype=\"Page\">Getting Help and Other Resources.</a></p>\n<h2>Rubric</h2>\n<p><strong>S&nbsp;</strong>- All tests pass, and the total time to run all tests on the test server is &lt; 1 second.</p>\n<p><strong>N</strong> - Test code compiles and runs, but not all tests pass or the tests take longer than 1 second to complete.</p>\n<p>(Reminder: the \"highest\" score possible on the programming part of each project is <strong>S</strong>.)</p>\n<h2>About</h2>\n<p>You may be wondering about the file of dictionary words used in this project.&nbsp; Not surprisingly, commercial online dictionaries (even if free to use online) do not give their word lists out freely.&nbsp; There are, however, many open source spelling dictionaries and the like; for example, the <code>aspell</code> spell checker (freely available on linux) comes with a spelling dictionary.&nbsp; That particular dictionary is not well suited for this project, as it includes punctuation; it is also somewhat smaller than the file provided for this project. (However, there are <code>aspell</code> dictionaries for other languages, so if you'd like to make a trie for e.g., Portuguese, appropriate word lists are available.)&nbsp;&nbsp;</p>\n<p>The provided file is a well-known and widely shared public domain data set generally known as the \"ENABLE\" (<span>Enhanced North American Benchmark LEexicon</span>) word list, and was designed primarily for use with various word games.&nbsp; (Most word games don't allow words of one letter, which is why the word \"a\" doesn't appear in the file.)&nbsp; For more information about this data set, see this <a class=\"inline_disabled\" href=\"http://wiki.puzzlers.org/dokuwiki/doku.php?id=solving:wordlists:about:enable_readme&amp;s=enable\" target=\"_blank\">ENABLE word list README file</a>.</p>\n<h2>Submit to Gradescope</h2>\n<p>When all your tests are running \"green\", then you are done and can submit your code for grading. To do so, load the assignment in Gradescope by clicking the button below and submit <strong>at least</strong> your <code>CMakeLists.txt</code>, <code>trie.h</code>, and <code>trie.cpp</code>&nbsp;files. You may include other files if they are required for your solution to build (you do not need to include anything in the test directories).&nbsp; Gradescope lets you either upload a ZIP file or drag and drop individual files; do whatever works for you. See <a title=\"Programming Projects Workflow\" href=\"https://elearning.mines.edu/courses/72567/pages/programming-projects-workflow\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72567/pages/programming-projects-workflow\" data-api-returntype=\"Page\">Programming Projects Workflow</a> for details.</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72567/assignments/469668","date":"2025-04-14T23:59:59-06:00","course":"CSCI 220"},{"name":"Topic 4C WebWork Homework","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p>Complete the Topic 4C WebWork Homework on WebWork (linked below). There is nothing for you to submit on Canvas, but please take note of the due date listed here. Grades for WebWork Homework will be imported to Canvas.</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72767/assignments/454224","date":"2025-04-15T08:00:00-06:00","course":"PHGN 200"},{"name":"Topic 4D Studio Points","description":null,"html_url":"https://elearning.mines.edu/courses/72767/assignments/454227","date":"2025-04-16T19:00:00-06:00","course":"PHGN 200"},{"name":"Worksheet 10 - Two-Dimensional Systems of First-Order Linear Autonomous ODE","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p><a class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"MATH225S25-WS10.pdf\" href=\"https://elearning.mines.edu/courses/71447/files/7796211?verifier=NScD5CT3AeNjUkZnkUhFy46cq39JHFCcb2v3OKwm&amp;wrap=1\" target=\"_blank\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/71447/files/7796211\" data-api-returntype=\"File\">MATH225S25-WS10.pdf</a></p>\n<p>&nbsp;</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/71447/assignments/462939","date":"2025-04-16T23:59:00-06:00","course":"MATH 225"},{"name":"Worksheet 12","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p>Please submit Worksheet 12 (below) by the due date given by your instructor.</p>\n<p>&nbsp;</p>\n<p style=\"padding-left: 40px;\"><a id=\"7358062\" class=\"instructure_file_link instructure_scribd_file inline_disabled\" title=\"Link\" href=\"https://elearning.mines.edu/courses/72125/files/7358079?verifier=ezBO8oJ1jMYsy4fK7jZCbFsnnQGo61KHCRcvFTTk&amp;wrap=1\" target=\"_blank\" data-canvas-previewable=\"true\" data-api-endpoint=\"https://elearning.mines.edu/api/v1/courses/72125/files/7358079\" data-api-returntype=\"File\">MATH213-Worksheet12.pdf</a></p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72125/assignments/453573","date":"2025-04-16T23:59:59-06:00","course":"MATH 213"},{"name":"Topic 4E Studio Points","description":null,"html_url":"https://elearning.mines.edu/courses/72767/assignments/454231","date":"2025-04-18T19:00:00-06:00","course":"PHGN 200"},{"name":"17.3 HW - Conservative Vector Fields","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p style=\"display: none;\">[syncid:XL:urn:udson:pearson.com/xl/highered:homeworkhistory/98297-H-568644753-2]</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72125/assignments/453309","date":"2025-04-20T23:59:00-06:00","course":"MATH 213"},{"name":"17.4 HW - Green's Theorem","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p style=\"display: none;\">[syncid:XL:urn:udson:pearson.com/xl/highered:homeworkhistory/98297-H-568644754-2]</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72125/assignments/453337","date":"2025-04-20T23:59:00-06:00","course":"MATH 213"},{"name":"Worksheet 13","description":null,"html_url":"https://elearning.mines.edu/courses/72125/assignments/453579","date":"2025-04-21T23:59:59-06:00","course":"MATH 213"},{"name":"Topic 4D WebWork Homework","description":"<link rel=\"stylesheet\" href=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108468/dp_app3.css\"><p>Complete the Topic 4D WebWork Homework on WebWork (linked below). There is nothing for you to submit on Canvas, but please take note of the due date listed here. Grades for WebWork Homework will be imported to Canvas.</p><script src=\"https://instructure-uploads.s3.amazonaws.com/account_98020000000000001/attachments/7108467/dp_app%20%25281%2529.js\"></script>","html_url":"https://elearning.mines.edu/courses/72767/assignments/454228","date":"2025-04-22T08:00:00-06:00","course":"PHGN 200"}],"grades":[{"course":"MATH 213","grade":85.74,"course_id":72125},{"course":"CSCI 341","grade":79.52,"course_id":71983},{"course":"CSCI 220","grade":100.0,"course_id":72567},{"course":"MATH 225","grade":90.43,"course_id":71447},{"course":"PHGN 200","grade":83.0,"course_id":72767}]}